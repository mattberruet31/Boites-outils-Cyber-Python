import os
import re
import subprocess
from pathlib import Path
import markdown

docs_dir = Path("docs")
log_file = Path("pentest_report.log")

# Fonction pour enregistrer des logs
def log_action(action):
    with open(log_file, 'a') as log:
        log.write(f"{action}\n")

# Charger les fichiers Markdown
def list_layers():
    return sorted([d for d in docs_dir.iterdir() if d.is_dir()])

def load_markdown(layer_path):
    md_file = next(layer_path.glob("cheat-couche_*.md"), None)
    if md_file:
        with open(md_file, 'r', encoding='utf-8') as file:
            return file.read()
    return ""

# Parser Markdown
def parse_markdown(content):
    tools = {}
    current_tool = None
    current_attack = None

    lines = content.splitlines()

    for line in lines:
        if line.startswith("### Outil:"):
            current_tool = line.replace("### Outil:", "").strip()
            tools[current_tool] = {}
        elif line.startswith("#### Attaque:") and current_tool:
            current_attack = line.replace("#### Attaque:", "").strip()
            tools[current_tool][current_attack] = []
        elif line.startswith("###### Commande:") and current_attack:
            cmd_title = line.replace("###### Commande:", "").strip()
            tools[current_tool][current_attack].append({"title": cmd_title, "command": "", "details": ""})
        elif line.startswith("```bash"):
            code_index = len(tools[current_tool][current_attack]) - 1
            command_block = []
            i = lines.index(line) + 1
            while lines[i] != "```":
                command_block.append(lines[i])
                i += 1
            tools[current_tool][current_attack][code_index]["command"] = "\n".join(command_block)

    return tools

# Interface utilisateur simplifiée
def choose_option(options, prompt):
    for i, option in enumerate(options, 1):
        print(f"{i}. {option}")
    choice = int(input(f"{prompt}: ")) - 1
    return options[choice]

# Exécution des commandes sélectionnées
def execute_command(command):
    print(f"\nCommande à exécuter:\n{command}\n")
    confirm = input("Exécuter la commande ? (o/n): ").lower()
    if confirm == 'o':
        subprocess.run(command, shell=True)
        log_action(f"Commande exécutée: {command}")
    else:
        print("Commande annulée.")
        log_action(f"Commande annulée: {command}")

# Menu principal
def main():
    layers = list_layers()
    selected_layer = choose_option(layers, "Sélectionnez une couche")

    content = load_markdown(selected_layer)
    tools = parse_markdown(content)

    selected_tool = choose_option(list(tools.keys()), "Sélectionnez un outil")
    selected_attack = choose_option(list(tools[selected_tool].keys()), "Sélectionnez une attaque")

    commands = tools[selected_tool][selected_attack]
    selected_command = choose_option([cmd['title'] for cmd in commands], "Sélectionnez une commande")

    command_details = next(cmd for cmd in commands if cmd['title'] == selected_command)
    execute_command(command_details['command'])

if __name__ == "__main__":
    main()
