#!/bin/bash
# Script : pentest_toolkit_hier.sh
# Description : Menu interactif pour sélectionner une couche (fichier Markdown) parmi plusieurs,
#              puis parcourir la structure hiérarchique (Outil → Attaque → Commande) pour exécuter des commandes,
#              et générer un rapport complet de test de sécurité.
# Auteur : [Votre Nom]
# Date : $(date +"%Y-%m-%d")
# Remarque : Le script parcourt le dossier "docs" pour lister les différentes couches.
#            Chaque dossier de couche doit contenir un fichier .md dont le nom commence par "cheat-couche_".

BASE_DIR="docs"
MD_FILE=""
LOG_FILE="pentest_report_$(date +'%Y%m%d_%H%M%S').log"

# Fonction de log
log_action() {
    echo "$(date +'%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_FILE"
}

# Fonction de confirmation
confirm_execution() {
    echo -n "Voulez-vous exécuter cette commande ? [o/n] : "
    read confirmation
    if [[ "$confirmation" =~ ^[oO]$ ]]; then
        return 0
    else
        return 1
    fi
}

##################################
# Sélection de la couche
##################################
select_layer() {
    echo "Couches disponibles :"
    layers=()
    index=1
    for dir in "$BASE_DIR"/Couche*; do
        if [ -d "$dir" ]; then
            layers+=("$dir")
            printf "%d) %s\n" "$index" "$(basename "$dir")"
            ((index++))
        fi
    done
    if [ ${#layers[@]} -eq 0 ]; then
        echo "Aucune couche trouvée dans $BASE_DIR."
        exit 1
    fi
    echo -n "Choisissez une couche (numéro) : "
    read layer_choice
    if ! [[ "$layer_choice" =~ ^[0-9]+$ ]] || [ "$layer_choice" -lt 1 ] || [ "$layer_choice" -gt "${#layers[@]}" ]; then
        echo "Choix invalide."
        exit 1
    fi
    selected_layer="${layers[$((layer_choice-1))]}"
    log_action "Couche sélectionnée : $(basename "$selected_layer")"
    MD_FILE=$(find "$selected_layer" -maxdepth 1 -type f -name "cheat-couche_*.md" | head -n 1)
    if [ -z "$MD_FILE" ]; then
        echo "Aucun fichier Markdown trouvé dans $selected_layer."
        exit 1
    fi
}

##################################
# Sélection d'un outil dans le fichier Markdown
# (lignes commençant par "### Outil:")
##################################
select_tool_from_md() {
    echo "Outils disponibles dans la couche $(basename "$selected_layer") :"
    tools=()
    index=1
    while IFS= read -r line; do
        tool_name=$(echo "$line" | sed 's/^### Outil:[[:space:]]*//')
        tools+=("$tool_name")
        printf "%d) %s\n" "$index" "$tool_name"
        ((index++))
    done < <(grep '^### Outil:' "$MD_FILE")
    if [ ${#tools[@]} -eq 0 ]; then
        echo "Aucun outil trouvé dans $MD_FILE."
        exit 1
    fi
    echo -n "Choisissez un outil (numéro) : "
    read tool_choice
    if ! [[ "$tool_choice" =~ ^[0-9]+$ ]] || [ "$tool_choice" -lt 1 ] || [ "$tool_choice" -gt "${#tools[@]}" ]; then
        echo "Choix invalide."
        exit 1
    fi
    selected_tool="${tools[$((tool_choice-1))]}"
    log_action "Outil sélectionné : $selected_tool"
    tool_block=$(sed -n "/^### Outil:[[:space:]]*$selected_tool/,/^### Outil:/p" "$MD_FILE")
}

##################################
# Sélection d'une attaque dans le bloc de l'outil
# (lignes commençant par "#### Attaque:")
##################################
select_attack() {
    echo "Attaques disponibles pour l'outil '$selected_tool' :"
    attacks=()
    index=1
    while IFS= read -r line; do
        attack_name=$(echo "$line" | sed 's/^#### Attaque:[[:space:]]*//')
        attacks+=("$attack_name")
        printf "%d) %s\n" "$index" "$attack_name"
        ((index++))
    done < <(echo "$tool_block" | grep '^#### Attaque:')
    if [ ${#attacks[@]} -eq 0 ]; then
        echo "Aucune attaque trouvée pour l'outil '$selected_tool'."
        exit 1
    fi
    echo -n "Choisissez une attaque (numéro) : "
    read attack_choice
    if ! [[ "$attack_choice" =~ ^[0-9]+$ ]] || [ "$attack_choice" -lt 1 ] || [ "$attack_choice" -gt "${#attacks[@]}" ]; then
        echo "Choix invalide."
        exit 1
    fi
    selected_attack="${attacks[$((attack_choice-1))]}"
    log_action "Attaque sélectionnée : $selected_attack"
    attack_block=$(echo "$tool_block" | sed -nr "/^#### Attaque:.*$selected_attack/,/^(#### Attaque:|### Outil:|# )/p")
}

##################################
# Sélection d'une commande dans le bloc de l'attaque
# (lignes commençant par "###### Commande:")
##################################
select_command() {
    echo "Commandes disponibles pour l'attaque '$selected_attack' :"
    titles=()
    index=1
    while IFS= read -r line; do
        cmd_title=$(echo "$line" | sed 's/^###### Commande:[[:space:]]*//')
        if [ -n "$cmd_title" ]; then
            titles+=("$cmd_title")
            printf "%d) %s\n" "$index" "$cmd_title"
            ((index++))
        fi
    done < <(echo "$attack_block" | grep '^###### Commande:')
    if [ ${#titles[@]} -eq 0 ]; then
        echo "Aucune commande trouvée pour l'attaque '$selected_attack'."
        exit 1
    fi
    echo -n "Choisissez une commande (numéro) : "
    read cmd_choice
    if ! [[ "$cmd_choice" =~ ^[0-9]+$ ]] || [ "$cmd_choice" -lt 1 ] || [ "$cmd_choice" -gt "${#titles[@]}" ]; then
        echo "Choix invalide."
        exit 1
    fi
    selected_cmd_title="${titles[$((cmd_choice-1))]}"
    log_action "Commande sélectionnée : $selected_cmd_title"
    cmd_block=$(echo "$attack_block" | sed -nr "/^###### Commande:.*$selected_cmd_title/,/^(###### Commande:|#### |### |# )/p")
    code=$(echo "$cmd_block" | sed -n '/^```bash/,/^```/p' | sed '1d;$d')
    details=$(echo "$cmd_block" | sed -n '/^Détails :/,$p' | sed '1d')
    echo "Commande à exécuter :"
    echo "Titre: $selected_cmd_title"
    echo "--------------------------------"
    echo "$code"
    echo "--------------------------------"
    echo "Détails :"
    echo "$details"
    echo "--------------------------------"
    if confirm_execution; then
        log_action "Exécution de la commande '$selected_cmd_title'"
        eval "$code"
    else
        log_action "Commande affichée mais non exécutée."
    fi
    echo -n "Appuyez sur Entrée pour continuer..."
    read
}

##################################
# Fonction pour générer un rapport complet
##################################
generate_full_report() {
    echo "=== Génération du Rapport de Test de Sécurité ==="
    read -p "Nom du test : " test_name
    read -p "Cible du test : " target
    read -p "Nom du testeur : " tester
    read -p "Description du test : " test_description
    read -p "Observations du testeur : " observations
    read -p "Conclusion du test : " conclusion
    read -p "Recommandation 1 : " recommendation_1
    read -p "Recommandation 2 : " recommendation_2
    read -p "Recommandation 3 : " recommendation_3

    cat <<EOF > full_report.md
# Rapport de Test de Sécurité

## Informations Générales
- **Date du test** : $(date)
- **Nom du test** : $test_name
- **Couche sélectionnée** : $(basename "$selected_layer")
- **Outil utilisé** : $selected_tool
- **Attaque réalisée** : $selected_attack
- **Commande exécutée** : $selected_cmd_title
- **Cible** : $target
- **Testeur** : $tester

---

## Description du Test
$test_description

---

## Résumé du Test
- **Couche sélectionnée** : $(basename "$selected_layer")
- **Outil sélectionné** : $selected_tool
- **Attaque sélectionnée** : $selected_attack
- **Commande sélectionnée** : $selected_cmd_title

---

## Logs et Sorties de l'Outil
\`\`\`
$(cat "$LOG_FILE")
\`\`\`

---

## Observations
$observations

---

## Conclusion
$conclusion

---

## Recommandations Générales
- $recommendation_1
- $recommendation_2
- $recommendation_3
EOF

    echo "Rapport complet généré dans full_report.md"
    log_action "Rapport complet généré."
}


##################################
# Menu principal hiérarchique
##################################
while true; do
    clear
    echo "=========================================="
    echo "Pentest Toolkit"
    echo "Sélection de la Couche"
    echo "=========================================="
    echo "1. Sélectionner une couche, puis un outil, une attaque et exécuter une commande"
    echo "2. Générer le rapport complet de Test de Sécurité"
    echo "3. Quitter"
    echo "=========================================="
    echo -n "Votre choix : "
    read main_choice
    case $main_choice in
        1)
            select_layer
            select_tool_from_md
            select_attack
            select_command
            ;;
        2)
            generate_full_report
            echo -n "Appuyez sur Entrée pour continuer..."
            read
            ;;
        3)
            echo "Au revoir !"
            exit 0
            ;;
        *)
            echo "Option invalide."
            sleep 1
            ;;
    esac
done